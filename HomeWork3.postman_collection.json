{
	"info": {
		"_postman_id": "e28f617d-ec23-4171-8a63-c04141531df4",
		"name": "HomeWork3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resdata = pm.response.json();\r",
							"console.log(resdata)\r",
							"let token = resdata.token\r",
							"console.log(token)\r",
							"pm.environment.set(\"auth_token\", token);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "korjanski",
							"type": "text"
						},
						{
							"key": "password",
							"value": "kor",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Проверка структуры json в ответе.\r",
							"let resdata = pm.response.json();\r",
							"console.log(resdata)\r",
							"\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"additionalProperties\": false,\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"let reqdata = request.data\r",
							"console.log (reqdata)\r",
							"\r",
							"pm.test('Body is correct', function() {\r",
							"  pm.expect(tv4.validate(resdata, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test('Valid is schema', function() {\r",
							" let correct = tv4.validate(resdata, schema, true, true) \r",
							" pm.expect(correct).to.be.true\r",
							"});\r",
							"\r",
							"\r",
							"//resp.\r",
							"//{'start_qa_salary':salary,\r",
							" //'qa_salary_after_6_months': salary * 2,\r",
							" //'qa_salary_after_12_months': salary * 2.9,\r",
							" //'person': {'u_name':[user_name, salary, age],\r",
							"                                //'u_age':age,\r",
							"                                //'u_salary_1.5_year': salary * 4}\r",
							"                                //}\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"pm.test(\"Salary\", function () {\r",
							"    pm.expect(resdata.start_qa_salary).to.eql(resdata.person.u_name[1]); \r",
							"});\r",
							"\r",
							"pm.test(\"Salary*2\", function () {\r",
							"    pm.expect(resdata.qa_salary_after_6_months).to.eql(resdata.person.u_name[1]*2); \r",
							"});\r",
							"\r",
							"pm.test(\"Salary*2.9\", function () {\r",
							"    pm.expect(resdata.qa_salary_after_12_months).to.eql(resdata.person.u_name[1]*2.9); \r",
							"});\r",
							"\r",
							"pm.test(\"Salary_1.5year\", function () {\r",
							"    pm.expect(resdata.person.u_salary_1_5_year).to.eql(resdata.person.u_name[1]*4); \r",
							"});\r",
							"//4)Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса \r",
							"//http://162.55.220.72:5005/get_test_user\r",
							"\r",
							"let salary = resdata.person.u_salary_1_5_year\r",
							"pm.environment.set(\"u_salary_1.5_year\", salary);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": \"{{age}}\",\r\n\"salary\": \"{{salary}}\",\r\n\"name\": \"{{name}}\",\r\n\"auth_token\": \"{{auth_token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//2) Проверка структуры json в ответе.\r",
							"let resdata = pm.response.json();\r",
							"console.log(resdata)\r",
							"\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"additionalProperties\": false,\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Body is correct', function() {\r",
							"  pm.expect(tv4.validate(resdata, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test('Valid is schema', function() {\r",
							" let correct = tv4.validate(resdata, schema, true, true) \r",
							" pm.expect(correct).to.be.true\r",
							"});\r",
							"\r",
							"//Resp.\r",
							"//{'name':name,\r",
							"  //'age': int(age),\r",
							"  //'salary': [salary, str(salary*2), str(salary*3)]}\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"let reqdata = request.data;\r",
							"\r",
							"pm.test(\"salary\", function () {\r",
							"    pm.expect(resdata.salary[0]).to.eql(+reqdata.salary); \r",
							"});\r",
							"\r",
							"pm.test(\"salary*2\", function () {\r",
							"    pm.expect(+resdata.salary[1]).to.eql(reqdata.salary*2); \r",
							"});\r",
							"\r",
							"pm.test(\"salary*3\", function () {\r",
							"    pm.expect(+resdata.salary[2]).to.eql(reqdata.salary*3); \r",
							"});\r",
							"//4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"\r",
							"pm.test(\"element_2\", function () {\r",
							"    pm.expect(+resdata.salary[2]).to.above(+resdata.salary[1]); \r",
							"});\r",
							"\r",
							"pm.test(\"element_2\", function () {\r",
							"    pm.expect(+resdata.salary[2]).to.above(+resdata.salary[0]); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "34",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1300",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Sergio",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/new_data",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"let resdata = pm.response.json();\r",
							"console.log(resdata)\r",
							"\r",
							"let schema = {\r",
							"\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\"additionalProperties\": false,\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Body is correct', function() {\r",
							"  pm.expect(tv4.validate(resdata, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test('Valid is schema', function() {\r",
							" let correct = tv4.validate(resdata, schema, true, true) \r",
							" pm.expect(correct).to.be.true\r",
							"});\r",
							"\r",
							"//Resp.\r",
							"//{'name': name,\r",
							" //'age': age,\r",
							" //'daily_food':weight * 0.012,\r",
							" //'daily_sleep': weight * 2.5}\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"let reqdata = request.data;\r",
							"\r",
							"pm.test(\"weight*0.012\", function () {\r",
							"    pm.expect(resdata.daily_food).to.eql(+reqdata.weight * 0.012); \r",
							"});\r",
							"\r",
							"pm.test(\"weight*2.5\", function () {\r",
							"    pm.expect(resdata.daily_sleep).to.eql(+reqdata.weight * 2.5); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "34",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "81",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Sergio",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/test_pet_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"let resdata = pm.response.json();\r",
							"console.log(resdata)\r",
							"\r",
							"let schema = {\r",
							"\"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\"additionalProperties\": false,\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Body is correct', function() {\r",
							"  pm.expect(tv4.validate(resdata, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test('Valid is schema', function() {\r",
							" let correct = tv4.validate(resdata, schema, true, true) \r",
							" pm.expect(correct).to.be.true\r",
							"});\r",
							"\r",
							"//Resp.\r",
							"//{'name': name,\r",
							" //'age':age,\r",
							" //'salary': salary,\r",
							" //'family':{'children':[['Alex', 24],['Kate', 12]],\r",
							" //'u_salary_1.5_year': salary * 4}\r",
							"  //}\r",
							"\r",
							"//3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"let reqdata =request.data\r",
							"\r",
							"pm.test(\"name\", function () {\r",
							"    pm.expect(resdata.name).to.eql(reqdata.name); \r",
							"});\r",
							"//4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"\r",
							"pm.test(\"age\", function () {\r",
							"    pm.expect(resdata.age).to.eql(reqdata.age); \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "34",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1300",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Sergio",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		}
	]
}